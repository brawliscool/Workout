import React, { useState, useEffect, useCallback } from 'react';
import { initializeApp } from 'firebase/app';
import { getAuth, signInAnonymously, signInWithCustomToken, onAuthStateChanged } from 'firebase/auth';
import { getFirestore, doc, getDoc, setDoc, updateDoc, onSnapshot, collection, query, where, arrayUnion, arrayRemove, addDoc, serverTimestamp, deleteDoc, getDocs } from 'firebase/firestore';
import { getStorage, ref, uploadBytes, getDownloadURL } from 'firebase/storage'; // Import Firebase Storage functions

// Ensure these global variables are defined by the environment
const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
const firebaseConfig = typeof __firebase_config !== 'undefined' ? JSON.parse(__firebase_config) : {};
const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

// Custom Modal/Message Box component (replaces alert/confirm)
const MessageBox = ({ message, type, onClose }) => {
  if (!message) return null;

  const bgColor = type === 'error' ? 'bg-red-500' : 'bg-blue-500';
  const title = type === 'error' ? 'Error' : 'Info';

  return (
    <div className="fixed inset-0 bg-gray-600 bg-opacity-50 flex items-center justify-center p-4 z-50">
      <div className="bg-white rounded-lg shadow-xl p-6 max-w-sm w-full">
        <h3 className={`text-lg font-semibold mb-4 ${type === 'error' ? 'text-red-700' : 'text-blue-700'}`}>{title}</h3>
        <p className="text-gray-700 mb-6">{message}</p>
        <div className="flex justify-end">
          <button
            onClick={onClose}
            className={`px-4 py-2 rounded-md text-white font-medium ${bgColor} hover:opacity-90 transition-opacity`}
          >
            Close
          </button>
        </div>
      </div>
    </div>
  );
};

// Loading Spinner component
const LoadingSpinner = () => (
  <div className="flex justify-center items-center h-full">
    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
  </div>
);

// Function to calculate rank based on total reps
const calculateRank = (totalReps) => {
  if (totalReps >= 10001) {
    return { name: 'GRAND MASTER', icon: '🏆' };
  } else if (totalReps >= 5001) {
    return { name: 'Emerald', icon: '💎' };
  } else if (totalReps >= 1001) {
    return { name: 'Diamond', icon: '✨' };
  } else {
    return { name: 'Copper', icon: '🥉' };
  }
};

// Pre-made planet and moon image URLs
const planetImages = [
  'https://photojournal.jpl.nasa.gov/jpeg/PIA15161.jpg', // Mercury
  'https://science.nasa.gov/wp-content/uploads/2023/02/venus-gettyimages-1191062973-16x9-1.jpg', // Venus
  'https://upload.wikimedia.org/wikipedia/commons/thumb/9/97/The_Earth_seen_from_Apollo_17.jpg/250px-The_Earth_seen_from_Apollo_17.jpg', // Earth (original, working)
  'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e1/FullMoon2010.jpg/250px-FullMoon2010.jpg', // Moon (original, working)
  'https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/OSIRIS_Mars_true_color.jpg/250px-OSIRIS_Mars_true_color.jpg', // Mars (original, working)
  'https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/Jupiter_and_its_shrunken_Great_Red_Spot.jpg/250px-Jupiter_and_its_shrunken_Great_Red_Spot.jpg', // Jupiter (original, working)
  'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c7/Saturn_during_Equinox.jpg/250px-Saturn_during_Equinox.jpg', // Saturn (original, working)
  'https://upload.wikimedia.org/wikipedia/commons/3/3d/Uranus_as_seen_by_Voyager_2_%2834994015060%29.png', // Uranus
  'https://upload.wikimedia.org/wikipedia/commons/5/56/Neptune_-_Voyager_2_%2829347980845%29_flatten_high_quality.jpg', // Neptune
];


// Main App Component
function App() {
  const [db, setDb] = useState(null);
  const [auth, setAuth] = useState(null);
  const [storage, setStorage] = useState(null); // New state for Firebase Storage
  const [userId, setUserId] = useState(null);
  const [currentUserProfile, setCurrentUserProfile] = useState(null);
  const [friends, setFriends] = useState([]);
  const [view, setView] = useState('profile'); // 'profile', 'friends', 'workouts', 'leaderboard', 'activityFeed'
  const [isAuthReady, setIsAuthReady] = useState(true); // Set to true initially for loading spinner
  const [isLoading, setIsLoading] = useState(true);
  const [message, setMessage] = useState('');
  const [messageType, setMessageType] = useState('info');
  const [showPlanetSelection, setShowPlanetSelection] = useState(false); // New state for showing/hiding planet selection

  // Workout tracking states
  const [newWorkoutName, setNewWorkoutName] = useState('');
  const [newWorkoutReps, setNewWorkoutReps] = useState('');
  const [newWorkoutWeight, setNewWorkoutWeight] = useState('');
  const [userWorkouts, setUserWorkouts] = useState([]);
  const [personalRecords, setPersonalRecords] = useState({});

  // Competitive features states
  const [allUsersData, setAllUsersData] = useState([]); // For leaderboard


  const [isEditingDisplayName, setIsEditingDisplayName] = useState(false);
  const [editedDisplayName, setEditedDisplayName] = useState('');

  // Friend Request System states
  const [friendRequestIdInput, setFriendRequestIdInput] = useState('');
  const [incomingFriendRequests, setIncomingFriendRequests] = useState([]);
  const [outgoingFriendRequests, setOutgoingFriendRequests] = useState([]);

  // Activity Feed states
  const [activityFeed, setActivityFeed] = useState([]);


  // Initialize Firebase and set up Auth Listener
  useEffect(() => {
    try {
      const app = initializeApp(firebaseConfig);
      const authInstance = getAuth(app);
      const firestoreInstance = getFirestore(app);
      const storageInstance = getStorage(app); // Initialize Firebase Storage

      setDb(firestoreInstance);
      setAuth(authInstance);
      setStorage(storageInstance); // Set storage instance

      const unsubscribe = onAuthStateChanged(authInstance, async (user) => {
        if (user) {
          setUserId(user.uid);
          setIsAuthReady(true);
        } else {
          // Sign in anonymously if no token, or with token if provided
          try {
            if (initialAuthToken) {
              await signInWithCustomToken(authInstance, initialAuthToken);
            } else {
              await signInAnonymously(authInstance);
            }
          } catch (error) {
            console.error("Error signing in:", error);
            setMessage(`Failed to sign in: ${error.message}`);
            setMessageType('error');
            setIsLoading(false);
          }
        }
      });

      return () => unsubscribe();
    } catch (error) {
      console.error("Error initializing Firebase:", error);
      setMessage(`Failed to initialize app: ${error.message}`);
      setMessageType('error');
      setIsLoading(false);
    }
  }, []);

  // Fetch/Create User Profile
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      const unsubscribe = onSnapshot(userDocRef, async (docSnap) => {
        if (docSnap.exists()) {
          const profileData = docSnap.data();
          setCurrentUserProfile(profileData);
          setEditedDisplayName(profileData.displayName); // Initialize edited name
        } else {
          // Create new profile if it doesn't exist
          const newProfile = {
            userId: userId,
            displayName: `User${userId.substring(0, 8)}`, // A simple default name
            friends: [],
            totalReps: 0, // Initialize total reps for ranking
            rank: calculateRank(0).name, // Initialize rank
            profilePhotoURL: planetImages[0], // Default to the first planet image
            createdAt: serverTimestamp(),
          };
          await setDoc(userDocRef, newProfile);
          setCurrentUserProfile(newProfile);
          setEditedDisplayName(newProfile.displayName);
        }
        setIsLoading(false);
      }, (error) => {
        console.error("Error fetching user profile:", error);
        setMessage(`Failed to load profile: ${error.message}`);
        setMessageType('error');
        setIsLoading(false);
      });

      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady]);

  // Fetch Friends' Profiles
  useEffect(() => {
    if (db && currentUserProfile && currentUserProfile.friends && isAuthReady) {
      if (currentUserProfile.friends.length === 0) {
        setFriends([]);
        return;
      }

      // Create a query to get all friends' profiles
      const friendsQuery = query(
        collection(db, `artifacts/${appId}/public/data/users`),
        where("userId", "in", currentUserProfile.friends)
      );

      const unsubscribe = onSnapshot(friendsQuery, (snapshot) => {
        const friendList = snapshot.docs.map(doc => doc.data());
        setFriends(friendList);
      }, (error) => {
        console.error("Error fetching friends:", error);
        setMessage(`Failed to load friends: ${error.message}`);
        setMessageType('error');
      });

      return () => unsubscribe();
    } else if (currentUserProfile && currentUserProfile.friends && currentUserProfile.friends.length === 0) {
      setFriends([]); // Ensure friends list is empty if no friends
    }
  }, [db, currentUserProfile, isAuthReady]);

  // Fetch User Workouts and Calculate PRs
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const workoutsCollectionRef = collection(db, `artifacts/${appId}/public/data/users/${userId}/workouts`);
      const unsubscribe = onSnapshot(workoutsCollectionRef, (snapshot) => {
        const workouts = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        // Sort workouts by timestamp descending
        workouts.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
        setUserWorkouts(workouts);
        calculatePersonalRecords(workouts);
      }, (error) => {
        console.error("Error fetching workouts:", error);
        setMessage(`Failed to load workouts: ${error.message}`);
        setMessageType('error');
      });

      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady]);

  // Fetch all users for leaderboard (now only friends and current user for friend leaderboard)
  useEffect(() => {
    if (db && isAuthReady && currentUserProfile) {
      const usersCollectionRef = collection(db, `artifacts/${appId}/public/data/users`);
      // Query for current user and all friends
      const userIdsToFetch = [...currentUserProfile.friends, userId].filter(Boolean); // Ensure no null/undefined
      if (userIdsToFetch.length === 0) {
        setAllUsersData([]);
        return;
      }

      const leaderboardQuery = query(
        usersCollectionRef,
        where("userId", "in", userIdsToFetch)
      );

      const unsubscribe = onSnapshot(leaderboardQuery, (snapshot) => {
        const users = snapshot.docs.map(doc => doc.data());
        // Sort users by totalReps for leaderboard
        users.sort((a, b) => (b.totalReps || 0) - (a.totalReps || 0));
        setAllUsersData(users);
      }, (error) => {
        console.error("Error fetching users for leaderboard:", error);
        setMessage(`Failed to load leaderboard data: ${error.message}`);
        setMessageType('error');
      });
      return () => unsubscribe();
    }
  }, [db, isAuthReady, currentUserProfile, userId]);


  // Fetch Incoming and Outgoing Friend Requests
  useEffect(() => {
    if (db && userId && isAuthReady) {
      const requestsCollectionRef = collection(db, `artifacts/${appId}/public/data/friendRequests`);

      // Incoming requests
      const incomingQuery = query(requestsCollectionRef, where("receiverId", "==", userId), where("status", "==", "pending"));
      const unsubscribeIncoming = onSnapshot(incomingQuery, (snapshot) => {
        setIncomingFriendRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
      }, (error) => {
        console.error("Error fetching incoming friend requests:", error);
        setMessage(`Failed to load incoming requests: ${error.message}`);
        setMessageType('error');
      });

      // Outgoing requests (optional, but good for user feedback)
      const outgoingQuery = query(
        requestsCollectionRef,
        where("senderId", "==", userId),
        where("status", "==", "pending")
      );
      const unsubscribeOutgoing = onSnapshot(outgoingQuery, (snapshot) => {
        setOutgoingFriendRequests(snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() })));
      }, (error) => {
        console.error("Error fetching outgoing friend requests:", error);
        setMessage(`Failed to load outgoing requests: ${error.message}`);
        setMessageType('error');
      });

      return () => {
        unsubscribeIncoming();
        unsubscribeOutgoing();
      };
    }
  }, [db, userId, isAuthReady]);

  // Fetch Activity Feed
  useEffect(() => {
    if (db && userId && isAuthReady && friends.length > 0) {
      const activityFeedCollectionRef = collection(db, `artifacts/${appId}/public/data/activityFeed`);
      const friendAndSelfIds = [...friends.map(f => f.userId), userId];

      // Firestore 'in' query supports up to 10 values. If friends.length + 1 > 10,
      // this query needs to be broken into multiple queries or adjusted.
      // For now, assuming a reasonable number of friends.
      const activityQuery = query(
        activityFeedCollectionRef,
        where("userId", "in", friendAndSelfIds)
        // orderBy("timestamp", "desc") // Ordering can be done client-side if performance is an issue with large datasets
      );

      const unsubscribe = onSnapshot(activityQuery, (snapshot) => {
        const activities = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        // Client-side sort for now
        activities.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
        setActivityFeed(activities);
      }, (error) => {
        console.error("Error fetching activity feed:", error);
        setMessage(`Failed to load activity feed: ${error.message}`);
        setMessageType('error');
      });
      return () => unsubscribe();
    } else if (db && userId && isAuthReady && friends.length === 0) {
      // If no friends, just show own activities
      const activityFeedCollectionRef = collection(db, `artifacts/${appId}/public/data/activityFeed`);
      const activityQuery = query(
        activityFeedCollectionRef,
        where("userId", "==", userId)
      );
      const unsubscribe = onSnapshot(activityQuery, (snapshot) => {
        const activities = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
        activities.sort((a, b) => (b.timestamp?.toDate() || 0) - (a.timestamp?.toDate() || 0));
        setActivityFeed(activities);
      }, (error) => {
        console.error("Error fetching activity feed for self:", error);
        setMessage(`Failed to load activity feed: ${error.message}`);
        setMessageType('error');
      });
      return () => unsubscribe();
    }
  }, [db, userId, isAuthReady, friends]);


  // Function to calculate personal records
  const calculatePersonalRecords = useCallback((workouts) => {
    const prs = {};
    workouts.forEach(workout => {
      const name = workout.workoutName.toLowerCase();
      if (!prs[name]) {
        prs[name] = { maxReps: 0, maxWeight: 0 };
      }
      if (workout.reps > prs[name].maxReps) {
        prs[name].maxReps = workout.reps;
      }
      if (workout.weight && workout.weight > prs[name].maxWeight) {
        prs[name].maxWeight = workout.weight;
      }
    });
    setPersonalRecords(prs);
  }, []);

  // Function to send a friend request
  const sendFriendRequest = async () => {
    const receiverId = friendRequestIdInput.trim();
    if (!db || !userId || !currentUserProfile || !receiverId) {
      setMessage("Invalid recipient ID or user not authenticated.");
      setMessageType('error');
      return;
    }
    if (receiverId === userId) {
      setMessage("You cannot send a friend request to yourself.");
      setMessageType('error');
      return;
    }

    try {
      setIsLoading(true);
      // Check if receiver exists
      const receiverDocRef = doc(db, `artifacts/${appId}/public/data/users`, receiverId);
      const receiverDocSnap = await getDoc(receiverDocRef);
      if (!receiverDocSnap.exists()) {
        setMessage("User not found with that ID.");
        setMessageType('error');
        setIsLoading(false);
        return;
      }

      // Check if already friends
      if (currentUserProfile.friends.includes(receiverId)) {
        setMessage("You are already friends with this user.");
        setMessageType('info');
        setIsLoading(false);
        return;
      }

      // Check for existing pending request (sender -> receiver)
      const existingOutgoingQuery = query(
        collection(db, `artifacts/${appId}/public/data/friendRequests`),
        where("senderId", "==", userId),
        where("receiverId", "==", receiverId),
        where("status", "==", "pending")
      );
      const existingOutgoingSnap = await getDocs(existingOutgoingQuery);
      if (!existingOutgoingSnap.empty) {
        setMessage("You have already sent a friend request to this user.");
        setMessageType('info');
        setIsLoading(false);
        return;
      }

      // Check for existing pending request (receiver -> sender)
      const existingIncomingQuery = query(
        collection(db, `artifacts/${appId}/public/data/friendRequests`),
        where("senderId", "==", receiverId),
        where("receiverId", "==", userId),
        where("status", "==", "pending")
      );
      const existingIncomingSnap = await getDocs(existingIncomingQuery);
      if (!existingIncomingSnap.empty) {
        setMessage("This user has already sent you a friend request. Please check your incoming requests.");
        setMessageType('info');
        setIsLoading(false);
        return;
      }

      // Send new request
      await addDoc(collection(db, `artifacts/${appId}/public/data/friendRequests`), {
        senderId: userId,
        senderDisplayName: currentUserProfile.displayName,
        receiverId: receiverId,
        status: 'pending',
        createdAt: serverTimestamp(),
      });
      setMessage(`Friend request sent to ${receiverDocSnap.data().displayName}!`);
      setMessageType('info');
      setFriendRequestIdInput('');
    } catch (error) {
      console.error("Error sending friend request:", error);
      setMessage(`Failed to send friend request: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to accept a friend request
  const acceptFriendRequest = async (requestId, senderId) => {
    if (!db || !userId) {
      setMessage("Database not ready or user not authenticated.");
      setMessageType('error');
      return;
    }
    try {
      setIsLoading(true);
      const requestDocRef = doc(db, `artifacts/${appId}/public/data/friendRequests`, requestId);
      await updateDoc(requestDocRef, { status: 'accepted' });

      // Add to current user's friends list
      const currentUserDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      await updateDoc(currentUserDocRef, { friends: arrayUnion(senderId) });

      // Add to sender's friends list
      const senderUserDocRef = doc(db, `artifacts/${appId}/public/data/users`, senderId);
      await updateDoc(senderUserDocRef, { friends: arrayUnion(userId) });

      // Add activity feed event for new friendship
      await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
        userId: userId,
        displayName: currentUserProfile.displayName,
        eventType: 'new_friendship',
        details: { friendId: senderId, friendDisplayName: (await getDoc(senderUserDocRef)).data().displayName },
        timestamp: serverTimestamp(),
      });

      setMessage("Friend request accepted!");
      setMessageType('info');
    } catch (error) {
      console.error("Error accepting friend request:", error);
      setMessage(`Failed to accept friend request: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to reject a friend request
  const rejectFriendRequest = async (requestId) => {
    if (!db) {
      setMessage("Database not ready.");
      setMessageType('error');
      return;
    }
    try {
      setIsLoading(true);
      const requestDocRef = doc(db, `artifacts/${appId}/public/data/friendRequests`, requestId);
      await updateDoc(requestDocRef, { status: 'rejected' }); // Or deleteDoc(requestDocRef);
      setMessage("Friend request rejected.");
      setMessageType('info');
    } catch (error) {
      console.error("Error rejecting friend request:", error);
      setMessage(`Failed to reject friend request: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to log a workout
  const logWorkout = async () => {
    if (!db || !userId || !currentUserProfile) {
      setMessage("Database not ready or user not authenticated.");
      setMessageType('error');
      return;
    }
    if (!newWorkoutName.trim() || !newWorkoutReps) {
      setMessage("Workout name and reps are required.");
      setMessageType('error');
      return;
    }
    const reps = parseInt(newWorkoutReps);
    const weight = newWorkoutWeight ? parseFloat(newWorkoutWeight) : 0;

    if (isNaN(reps) || reps <= 0) {
      setMessage("Reps must be a positive number.");
      setMessageType('error');
      return;
    }
    if (newWorkoutWeight && (isNaN(weight) || weight < 0)) {
      setMessage("Weight must be a non-negative number.");
      setMessageType('error');
      return;
    }

    try {
      setIsLoading(true);
      const workoutsCollectionRef = collection(db, `artifacts/${appId}/public/data/users/${userId}/workouts`);
      await addDoc(workoutsCollectionRef, {
        workoutName: newWorkoutName.trim(),
        reps: reps,
        weight: weight,
        timestamp: serverTimestamp(),
        userId: userId,
      });

      // Calculate new total reps and rank
      const newTotalReps = (currentUserProfile.totalReps || 0) + reps;
      const oldRankName = currentUserProfile.rank;
      const newRankInfo = calculateRank(newTotalReps);
      const newRankName = newRankInfo.name;

      const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      await updateDoc(userDocRef, {
        totalReps: newTotalReps,
        rank: newRankName,
      });

      // Add activity event for workout logged
      await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
        userId: userId,
        displayName: currentUserProfile.displayName,
        eventType: 'workout_logged',
        details: { workoutName: newWorkoutName.trim(), reps: reps, weight: weight },
        timestamp: serverTimestamp(),
      });

      // Check for new Personal Record and add activity event
      const currentPRs = personalRecords[newWorkoutName.toLowerCase()] || { maxReps: 0, maxWeight: 0 };
      if (reps > currentPRs.maxReps) {
        await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
          userId: userId,
          displayName: currentUserProfile.displayName,
          eventType: 'pr_achieved',
          details: { workoutName: newWorkoutName.trim(), metric: 'reps', oldValue: currentPRs.maxReps, newValue: reps },
          timestamp: serverTimestamp(),
        });
      }
      if (weight > 0 && weight > currentPRs.maxWeight) {
        await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
          userId: userId,
          displayName: currentUserProfile.displayName,
          eventType: 'pr_achieved',
          details: { workoutName: newWorkoutName.trim(), metric: 'weight', oldValue: currentPRs.maxWeight, newValue: weight },
          timestamp: serverTimestamp(),
        });
      }

      // Check for rank change and add activity event
      if (oldRankName !== newRankName) {
        await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
          userId: userId,
          displayName: currentUserProfile.displayName,
          eventType: 'rank_changed',
          details: { oldRank: oldRankName, newRank: newRankName },
          timestamp: serverTimestamp(),
        });
      }

      setMessage("Workout logged successfully!");
      setMessageType('info');
      setNewWorkoutName('');
      setNewWorkoutReps('');
      setNewWorkoutWeight('');
    } catch (error) {
      console.error("Error logging workout:", error);
      setMessage(`Failed to log workout: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to delete a workout
  const deleteWorkout = async (workoutId, repsToDelete) => {
    if (!db || !userId || !currentUserProfile) {
      setMessage("Database not ready or user not authenticated.");
      setMessageType('error');
      return;
    }

    try {
      setIsLoading(true);
      const workoutDocRef = doc(db, `artifacts/${appId}/public/data/users/${userId}/workouts`, workoutId);
      await deleteDoc(workoutDocRef);

      // Recalculate totalReps and rank
      const newTotalReps = Math.max(0, (currentUserProfile.totalReps || 0) - repsToDelete);
      const oldRankName = currentUserProfile.rank;
      const newRankInfo = calculateRank(newTotalReps);
      const newRankName = newRankInfo.name;

      const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      await updateDoc(userDocRef, {
        totalReps: newTotalReps,
        rank: newRankName,
      });

      // Add activity event for workout deleted (optional, but good for feed consistency)
      await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
        userId: userId,
        displayName: currentUserProfile.displayName,
        eventType: 'workout_deleted',
        details: { repsDeleted: repsToDelete },
        timestamp: serverTimestamp(),
      });

      // Check for rank change due to deletion
      if (oldRankName !== newRankName) {
        await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
          userId: userId,
          displayName: currentUserProfile.displayName,
          eventType: 'rank_changed',
          details: { oldRank: oldRankName, newRank: newRankName },
          timestamp: serverTimestamp(),
        });
      }

      setMessage("Workout deleted successfully!");
      setMessageType('info');
    } catch (error) {
      console.error("Error deleting workout:", error);
      setMessage(`Failed to delete workout: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to update display name
  const updateDisplayName = async () => {
    if (!db || !userId || !currentUserProfile) {
      setMessage("Database not ready or user not authenticated.");
      setMessageType('error');
      return;
    }
    if (!editedDisplayName.trim()) {
      setMessage("Display name cannot be empty.");
      setMessageType('error');
      return;
    }
    if (editedDisplayName.trim() === currentUserProfile.displayName) {
      setMessage("Display name is already the same.");
      setMessageType('info');
      setIsEditingDisplayName(false);
      return;
    }

    try {
      setIsLoading(true);
      const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      const oldDisplayName = currentUserProfile.displayName;
      await updateDoc(userDocRef, {
        displayName: editedDisplayName.trim()
      });

      // Add activity event for display name change
      await addDoc(collection(db, `artifacts/${appId}/public/data/activityFeed`), {
        userId: userId,
        displayName: editedDisplayName.trim(), // Use new display name for the event
        eventType: 'displayname_changed',
        details: { oldName: oldDisplayName, newName: editedDisplayName.trim() },
        timestamp: serverTimestamp(),
      });

      setMessage("Display name updated successfully!");
      setMessageType('info');
      setIsEditingDisplayName(false);
    } catch (error) {
      console.error("Error updating display name:", error);
      setMessage(`Failed to update display name: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to select a pre-made profile picture
  const selectProfilePicture = async (imageUrl) => {
    if (!db || !userId || !currentUserProfile) {
      setMessage("Database not ready or user not authenticated.");
      setMessageType('error');
      return;
    }

    try {
      setIsLoading(true);
      const userDocRef = doc(db, `artifacts/${appId}/public/data/users`, userId);
      await updateDoc(userDocRef, {
        profilePhotoURL: imageUrl
      });

      setMessage("Profile picture updated successfully!");
      setMessageType('info');
      setShowPlanetSelection(false); // Hide selection after choosing
    } catch (error) {
      console.error("Error updating profile picture:", error);
      setMessage(`Failed to update picture: ${error.message}`);
      setMessageType('error');
    } finally {
      setIsLoading(false);
    }
  };

  // Function to copy User ID to clipboard (using document.execCommand for broader compatibility)
  const copyUserIdToClipboard = () => {
    if (currentUserProfile && currentUserProfile.userId) {
      const tempInput = document.createElement('textarea');
      tempInput.value = currentUserProfile.userId;
      document.body.appendChild(tempInput);
      tempInput.select();
      try {
        document.execCommand('copy');
        setMessage("User ID copied to clipboard!");
        setMessageType('info');
      } catch (err) {
        console.error('Failed to copy User ID:', err);
        setMessage("Failed to copy User ID. Please try again.");
        setMessageType('error');
      } finally {
        document.body.removeChild(tempInput);
      }
    }
  };


  const closeMessage = () => {
    setMessage('');
    setMessageType('info');
  };

  // Leaderboard data is now always filtered to friends and current user
  const friendsLeaderboardData = allUsersData;


  if (isLoading || !isAuthReady) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-700 flex items-center justify-center font-inter text-white">
        <LoadingSpinner />
      </div>
    );
  }

  const userRank = currentUserProfile ? calculateRank(currentUserProfile.totalReps || 0) : { name: 'Copper', icon: '🥉' };

  // Helper to render activity feed items
  const renderActivityItem = (activity) => {
    const time = activity.timestamp ? new Date(activity.timestamp.toDate()).toLocaleString() : 'N/A';
    const isSelf = activity.userId === userId;
    const actor = isSelf ? 'You' : activity.displayName;

    switch (activity.eventType) {
      case 'workout_logged':
        return (
          <p>
            <span className="font-semibold">{actor}</span> logged a workout: <span className="font-medium capitalize">{activity.details.workoutName}</span> with {activity.details.reps} reps
            {activity.details.weight > 0 && ` and ${activity.details.weight} LBS`}.
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
      case 'pr_achieved':
        return (
          <p>
            <span className="font-semibold">{actor}</span> achieved a new Personal Record for <span className="font-medium capitalize">{activity.details.workoutName}</span>!
            New Max {activity.details.metric}: {activity.details.newValue} {activity.details.metric === 'weight' ? 'LBS' : 'reps'}.
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
      case 'rank_changed':
        return (
          <p>
            <span className="font-semibold">{actor}</span>'s rank changed from <span className="font-medium">{activity.details.oldRank}</span> to <span className="font-medium">{activity.details.newRank}</span>!
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
      case 'new_friendship':
        const friendName = activity.details.friendDisplayName || activity.details.friendId.substring(0,8);
        return (
          <p>
            <span className="font-semibold">{actor}</span> and <span className="font-semibold">{friendName}</span> are now friends!
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
      case 'displayname_changed':
        return (
          <p>
            <span className="font-semibold">{activity.details.oldName}</span> is now known as <span className="font-semibold">{activity.details.newName}</span>.
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
      case 'workout_deleted':
         return (
           <p>
             <span className="font-semibold">{actor}</span> deleted a workout entry. Total reps adjusted.
             <span className="text-xs text-gray-500 block mt-1">{time}</span>
           </p>
         );
      default:
        return (
          <p>
            <span className="font-semibold">{actor}</span> performed an action.
            <span className="text-xs text-gray-500 block mt-1">{time}</span>
          </p>
        );
    }
  };


  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-900 to-gray-700 font-inter flex flex-col text-white">
      <MessageBox message={message} type={messageType} onClose={closeMessage} />

      {/* Header/Navigation */}
      <header className="bg-gradient-to-r from-blue-600 to-purple-600 shadow-lg p-4 text-white">
        <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-3xl font-bold mb-2 sm:mb-0">💪 Ranked Workout</h1>
          <nav className="flex space-x-4">
            <button
              onClick={() => setView('profile')}
              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 ${view === 'profile' ? 'bg-white text-blue-600 shadow-md' : 'text-white hover:bg-blue-700 hover:shadow-md'}`}
            >
              Profile
            </button>
            <button
              onClick={() => setView('friends')}
              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 ${view === 'friends' ? 'bg-white text-blue-600 shadow-md' : 'text-white hover:bg-blue-700 hover:shadow-md'}`}
            >
              Friends
            </button>
            <button
              onClick={() => setView('workouts')}
              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 ${view === 'workouts' ? 'bg-white text-blue-600 shadow-md' : 'text-white hover:bg-blue-700 hover:shadow-md'}`}
            >
              Workouts
            </button>
            <button
              onClick={() => setView('leaderboard')} // Leaderboard button
              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 ${view === 'leaderboard' ? 'bg-white text-blue-600 shadow-md' : 'text-white hover:bg-blue-700 hover:shadow-md'}`}
            >
              Leaderboard
            </button>
            <button
              onClick={() => setView('activityFeed')}
              className={`px-4 py-2 rounded-full font-medium transition-all duration-300 ${view === 'activityFeed' ? 'bg-white text-blue-600 shadow-md' : 'text-white hover:bg-blue-700 hover:shadow-md'}`}
            >
              Activity Feed
            </button>
          </nav>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="flex-grow container mx-auto p-4 sm:p-6 lg:p-8">
        {view === 'profile' && currentUserProfile && (
          <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200 text-gray-800">
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Your Profile</h2>
            <div className="space-y-4">
              {/* Profile Picture Section */}
              <div className="flex flex-col items-center mb-6">
                <img
                  src={currentUserProfile.profilePhotoURL || planetImages[0]} // Fallback to first planet image
                  alt="Profile"
                  className="w-24 h-24 rounded-full object-cover border-4 border-blue-500 shadow-md"
                  onError={(e) => { e.target.onerror = null; e.target.src = planetImages[0]; }} // Fallback on error
                />
                <div className="mt-4 flex flex-col items-center space-y-2">
                  <button
                    onClick={() => setShowPlanetSelection(!showPlanetSelection)}
                    className="px-4 py-2 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors shadow-md"
                  >
                    {showPlanetSelection ? 'Hide Planet/Moon Selection' : 'Choose Planet/Moon'}
                  </button>
                  {showPlanetSelection && (
                    <div className="grid grid-cols-3 sm:grid-cols-4 gap-2 mt-4 max-w-xs">
                      {planetImages.map((imageUrl, index) => (
                        <img
                          key={index}
                          src={imageUrl}
                          alt={`Planet ${index + 1}`}
                          className={`w-16 h-16 rounded-full object-cover cursor-pointer border-2 transition-all duration-200
                                    ${currentUserProfile.profilePhotoURL === imageUrl ? 'border-blue-500 ring-2 ring-blue-300' : 'border-gray-300 hover:border-blue-400'}`}
                          onClick={() => selectProfilePicture(imageUrl)}
                        />
                      ))}
                    </div>
                  )}
                </div>
              </div>

              <p className="text-lg text-gray-700 flex items-center">
                <span className="font-semibold text-gray-900 mr-2">Display Name:</span>
                {isEditingDisplayName ? (
                  <input
                    type="text"
                    value={editedDisplayName}
                    onChange={(e) => setEditedDisplayName(e.target.value)}
                    className="p-2 border border-gray-300 rounded-md flex-grow text-gray-800"
                  />
                ) : (
                  <span>{currentUserProfile.displayName}</span>
                )}
                {isEditingDisplayName ? (
                  <button
                    onClick={updateDisplayName}
                    className="ml-4 px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors"
                  >
                    Save
                  </button>
                ) : (
                  <button
                    onClick={() => setIsEditingDisplayName(true)}
                    className="ml-4 px-3 py-1 bg-gray-300 text-gray-800 rounded-md hover:bg-gray-400 transition-colors"
                  >
                    Edit
                  </button>
                )}
              </p>
              <p className="text-lg text-gray-700 flex items-center break-all">
                <span className="font-semibold text-gray-900">Your User ID:</span>
                <code className="bg-gray-100 p-1 rounded text-sm mx-2">
                  {currentUserProfile.userId.substring(0, 8)}...
                </code>
                <button
                  onClick={copyUserIdToClipboard}
                  className="px-3 py-1 bg-blue-500 text-white rounded-md hover:bg-blue-600 transition-colors text-sm"
                >
                  Copy ID
                </button>
              </p>
              <p className="text-lg text-gray-700">
                <span className="font-semibold text-gray-900">Friends Count:</span> {currentUserProfile.friends ? currentUserProfile.friends.length : 0}
              </p>
              <p className="text-lg text-gray-700">
                <span className="font-semibold text-gray-900">Total Reps:</span> {currentUserProfile.totalReps || 0}
              </p>
              <p className="text-xl font-bold text-gray-900 flex items-center">
                <span className="font-semibold text-gray-900">Your Rank:</span>
                <span className={`ml-2 text-blue-700 ${userRank.name === 'GRAND MASTER' ? 'text-purple-700' : ''}`}>
                  {userRank.icon} {userRank.name}
                </span>
              </p>
              <div className="mt-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
                <h3 className="text-xl font-semibold text-blue-800 mb-2">Your Personal Records</h3>
                {Object.keys(personalRecords).length === 0 ? (
                  <p className="text-blue-700 italic">Log some workouts to see your personal records here!</p>
                ) : (
                  <ul className="list-disc list-inside text-blue-700">
                    {Object.entries(personalRecords).map(([workoutName, pr]) => (
                      <li key={workoutName} className="mb-1">
                        <span className="font-semibold capitalize">{workoutName}:</span> Max Reps: {pr.maxReps}
                        {pr.maxWeight > 0 && `, Max Weight: ${pr.maxWeight} LBS`}
                      </li>
                    ))}
                  </ul>
                )}
              </div>
            </div>
          </div>
        )}

        {view === 'friends' && (
          <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200 text-gray-800">
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Your Friends</h2>

            {/* Send Friend Request Section */}
            <div className="mb-8 p-4 bg-green-50 rounded-lg border border-green-200">
              <h3 className="text-xl font-semibold text-green-800 mb-3">Send Friend Request</h3>
              <div className="flex flex-col sm:flex-row gap-3">
                <input
                  type="text"
                  id="friendRequestIdInput"
                  value={friendRequestIdInput}
                  onChange={(e) => setFriendRequestIdInput(e.target.value)}
                  placeholder="Enter friend's User ID (full ID)"
                  className="flex-grow p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-gray-800"
                />
                <button
                  onClick={sendFriendRequest}
                  className="px-6 py-3 bg-green-600 text-white font-medium rounded-md hover:bg-green-700 transition-colors shadow-md"
                >
                  Send Request
                </button>
              </div>
            </div>

            {/* Incoming Friend Requests */}
            <div className="mb-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h3 className="text-xl font-semibold text-blue-800 mb-3">Incoming Friend Requests ({incomingFriendRequests.length})</h3>
              {incomingFriendRequests.length === 0 ? (
                <p className="text-blue-700 italic">No pending friend requests.</p>
              ) : (
                <ul className="space-y-2">
                  {incomingFriendRequests.map(request => (
                    <li key={request.id} className="flex items-center justify-between bg-blue-100 p-3 rounded-md shadow-sm">
                      <p className="text-gray-900">
                        <span className="font-semibold">{request.senderDisplayName}</span> wants to be your friend!
                      </p>
                      <div className="flex space-x-2">
                        <button
                          onClick={() => acceptFriendRequest(request.id, request.senderId)}
                          className="px-3 py-1 bg-green-500 text-white text-sm rounded-md hover:bg-green-600 transition-colors"
                        >
                          Accept
                        </button>
                        <button
                          onClick={() => rejectFriendRequest(request.id)}
                          className="px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors"
                        >
                          Reject
                        </button>
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>

            {/* Outgoing Friend Requests (Optional) */}
            <div className="mb-8 p-4 bg-gray-50 rounded-lg border border-gray-200">
              <h3 className="text-xl font-semibold text-gray-800 mb-3">Outgoing Friend Requests ({outgoingFriendRequests.length})</h3>
              {outgoingFriendRequests.length === 0 ? (
                <p className="text-gray-600 italic">No pending outgoing friend requests.</p>
              ) : (
                <ul className="space-y-2">
                  {outgoingFriendRequests.map(request => (
                    <li key={request.id} className="flex items-center justify-between bg-gray-100 p-3 rounded-md shadow-sm">
                      <p className="text-gray-900">
                        Request sent to <span className="font-semibold">{request.receiverId.substring(0, 8)}...</span>
                      </p>
                      {/* Optionally add a cancel button here */}
                    </li>
                  ))}
                </ul>
              )}
            </div>

            {/* Friends List */}
            <h3 className="text-2xl font-semibold text-gray-800 mb-4">Current Friends ({friends.length})</h3>
            {friends.length === 0 ? (
              <p className="text-gray-600 italic">You don't have any friends yet. Send a request!</p>
            ) : (
              <ul className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                {friends.map((friend) => (
                  <li key={friend.userId} className="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200 flex items-center justify-between">
                    <div>
                      <p className="text-lg font-semibold text-gray-900">{friend.displayName}</p>
                      <p className="text-sm text-gray-600 break-all">ID: {friend.userId.substring(0, 8)}...</p>
                    </div>
                    <button
                      onClick={() => removeFriend(friend.userId)}
                      className="ml-4 px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors"
                    >
                      Remove
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}

        {view === 'workouts' && (
          <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200 text-gray-800">
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Workouts & Rankings</h2>

            {/* Log New Workout Section */}
            <div className="mb-8 p-4 bg-blue-50 rounded-lg border border-blue-200">
              <h3 className="text-xl font-semibold text-blue-800 mb-3">Log New Workout</h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                <div>
                  <label htmlFor="workoutName" className="block text-sm font-medium text-gray-700 mb-1">Workout Name</label>
                  <input
                    type="text"
                    id="workoutName"
                    value={newWorkoutName}
                    onChange={(e) => setNewWorkoutName(e.target.value)}
                    placeholder="e.g., Bench Press, Squats"
                    className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-gray-800"
                  />
                </div>
                <div>
                  <label htmlFor="reps" className="block text-sm font-medium text-gray-700 mb-1">Reps</label>
                  <input
                    type="number"
                    id="reps"
                    value={newWorkoutReps}
                    onChange={(e) => setNewWorkoutReps(e.target.value)}
                    placeholder="e.g., 10"
                    min="1"
                    className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-gray-800"
                  />
                </div>
                <div>
                  <label htmlFor="weight" className="block text-sm font-medium text-gray-700 mb-1">Weight (LBS, optional)</label>
                  <input
                    type="number"
                    id="weight"
                    value={newWorkoutWeight}
                    onChange={(e) => setNewWorkoutWeight(e.target.value)}
                    placeholder="e.g., 130"
                    min="0"
                    step="0.1"
                    className="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all text-gray-800"
                  />
                </div>
              </div>
              <button
                onClick={logWorkout}
                className="w-full px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors shadow-md"
              >
                Log Workout
              </button>
            </div>

            {/* Personal Records Section */}
            <div className="mb-8 p-4 bg-purple-50 rounded-lg border border-purple-200">
              <h3 className="text-xl font-semibold text-purple-800 mb-3">Your Personal Records</h3>
              {Object.keys(personalRecords).length === 0 ? (
                <p className="text-purple-700 italic">Log some workouts to see your personal records here!</p>
              ) : (
                <ul className="grid grid-cols-1 sm:grid-cols-2 gap-3 text-purple-700">
                  {Object.entries(personalRecords).map(([workoutName, pr]) => (
                    <li key={workoutName} className="mb-1">
                      <span className="font-semibold capitalize">{workoutName}:</span>
                      <p className="text-sm">Max Reps: <span className="font-bold">{pr.maxReps}</span></p>
                      {pr.maxWeight > 0 && <p className="text-sm">Max Weight: <span className="font-bold">{pr.maxWeight} LBS</span></p>}
                    </li>
                  ))}
                </ul>
              )}
            </div>

            {/* Past Workouts List */}
            <h3 className="text-2xl font-semibold text-gray-800 mb-4">Past Workouts ({userWorkouts.length})</h3>
            {userWorkouts.length === 0 ? (
              <p className="text-gray-600 italic">You haven't logged any workouts yet.</p>
            ) : (
              <ul className="space-y-3">
                {userWorkouts.map((workout) => (
                  <li key={workout.id} className="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200 flex items-center justify-between">
                    <div>
                      <p className="text-lg font-semibold text-gray-900 capitalize">{workout.workoutName}</p>
                      <p className="text-gray-700">Reps: {workout.reps}</p>
                      {workout.weight > 0 && <p className="text-gray-700">Weight: {workout.weight} LBS</p>}
                      <p className="text-sm text-gray-500">
                        Logged on: {workout.timestamp ? new Date(workout.timestamp.toDate()).toLocaleString() : 'N/A'}
                      </p>
                    </div>
                    <button
                      onClick={() => deleteWorkout(workout.id, workout.reps)}
                      className="ml-4 px-3 py-1 bg-red-500 text-white text-sm rounded-md hover:bg-red-600 transition-colors"
                    >
                      Delete
                    </button>
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}

        {view === 'leaderboard' && (
          <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200 text-gray-800">
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Friends Leaderboard</h2>

            {friendsLeaderboardData.length === 0 ? (
              <p className="text-gray-600 italic">No users on your friends leaderboard yet. Add some friends or log workouts!</p>
            ) : (
              <div className="overflow-x-auto">
                <table className="min-w-full bg-white rounded-lg shadow-md">
                  <thead>
                    <tr className="bg-green-100 text-green-800 uppercase text-sm leading-normal">
                      <th className="py-3 px-6 text-left">Rank</th>
                      <th className="py-3 px-6 text-left">Display Name</th>
                      <th className="py-3 px-6 text-left">Total Reps</th>
                      <th className="py-3 px-6 text-left">Tier</th>
                    </tr>
                  </thead>
                  <tbody className="text-gray-700 text-sm font-light">
                    {friendsLeaderboardData.map((user, index) => {
                      const rankInfo = calculateRank(user.totalReps || 0);
                      return (
                        <tr key={user.userId} className="border-b border-gray-200 hover:bg-gray-100">
                          <td className="py-3 px-6 text-left whitespace-nowrap">{index + 1}</td>
                          <td className="py-3 px-6 text-left">{user.displayName}</td>
                          <td className="py-3 px-6 text-left">{user.totalReps || 0}</td>
                          <td className="py-3 px-6 text-left font-semibold flex items-center">
                              {rankInfo.icon} <span className="ml-1">{rankInfo.name}</span>
                          </td>
                        </tr>
                      );
                    })}
                  </tbody>
                </table>
              </div>
            )}
          </div>
        )}

        {view === 'activityFeed' && (
          <div className="bg-white rounded-xl shadow-lg p-6 sm:p-8 border border-gray-200 text-gray-800">
            <h2 className="text-3xl font-bold text-gray-800 mb-6">Activity Feed</h2>
            {activityFeed.length === 0 ? (
              <p className="text-gray-600 italic">No recent activity from you or your friends. Log a workout or add friends!</p>
            ) : (
              <ul className="space-y-4">
                {activityFeed.map((activity) => (
                  <li key={activity.id} className="bg-gray-50 p-4 rounded-lg shadow-sm border border-gray-200">
                    {renderActivityItem(activity)}
                  </li>
                ))}
              </ul>
            )}
          </div>
        )}
      </main>

      {/* Footer */}
      <footer className="bg-gray-800 text-white p-4 text-center text-sm mt-8">
        <p>&copy; {new Date().getFullYear()} Ranked Workout App. All rights reserved.</p>
      </footer>
    </div>
  );
}

export default App;
